import matplotlib.pyplot as plt
from TRD_Atmospheric_Functions import *
from matplotlib.lines import Line2D
from matplotlib.colors import Normalize, LogNorm
from matplotlib import ticker, text
import matplotlib.gridspec as gridspec

label_fontsize = 14
set_font_opensans()
os.chdir('..')  # 'reverse' out of "plotting for paper" folder

sample_diode_ref = True
diodes_to_plt = [{'id':'A','eta_ext': 1, 'Eg': 0.094, 'style_args': {'marker': 'o', 'markersize': 8}},
                 {'id':'B','eta_ext': 1e-2, 'Eg': 0.094, 'style_args': {'marker': 'o', 'markersize': 8, 'fillstyle': 'right'}},
                 {'id':'C','eta_ext': 1e-1, 'Eg': 0.25, 'style_args': {'marker': 'o', 'mfc': 'none', 'mew': 1.5, 'markersize': 8}}]


# Import heatmap data
# imports pre-existing datafile generated by opt_gen_heatmap2D.py
eta_count = 80
x_sweep = np.logspace(-4,0,num=eta_count,base=10)
Eg_start = 0.02
Eg_count = 80
y_sweep = np.linspace(Eg_start, 0.3, Eg_count)

case_dict = get_dataset_list()[1]

atm_data = atmospheric_dataset_new(cwv=case_dict['cwvstring'], location=case_dict['loc'], Tskin=case_dict['Tskin'], date='23dec')
case_label = case_dict['loc'] + ' ' + case_dict['cwvstring']
filename = f'PD_heatmaps\PD_{case_label}_etaextlog_-4_0_{eta_count}_Egs_{Eg_start}_02_{Eg_count}.csv'

pds_2d = np.loadtxt(filename, delimiter=',', dtype=float)


# Construct list of conditions to compare in scatter plot
comparison_lst = []
args_to_opt = ['mu']

datasets = get_dataset_list()

for ds in datasets:
    cwv_str = ds['cwvstring']
    loc_str = ds['loc']
    atm_data = atmospheric_dataset_new(cwv=cwv_str, location=loc_str, Tskin=ds['Tskin'], date='23dec')
    Ephs = atm_data.photon_energies
    line_format_dct = {'color': ds['color'], 'linestyle': 'solid'}
    scatter_format = {'c': ds['color'], 'marker': ds['symbol'], 'markersize':8}
    emitter_planck = planck_law_body(T=ds['Tskin'], Ephs=Ephs)
    comparison_lst += [{'label': f'{loc_str} {cwv_str}', 'colour':ds['color'], 'scatter format':scatter_format,
                        'cwv':ds['tcwv'],
                        'TRD in atm':TRD_in_atmosphere(emitter_planck, atm_data)}]

emitter_planck = planck_law_body(T=300)
env_planck = planck_law_body(T=3)
comparison_lst += [{'label': f'3K', 'colour':'black','scatter format': {'c':'k', 'marker':'o', 'markersize':8},
                        'cwv':0,
                        'TRD in atm':TRD_in_atmosphere(emitter_planck, env_planck)}]

alg_powell = pg.scipy_optimize(method='Powell', tol=1e-5)




fig = plt.figure(figsize=(15,6))

gs1 = fig.add_gridspec(1, 3, width_ratios=[5,1,2], wspace=0.5)
gs2 = fig.add_gridspec(1, 3, width_ratios=[5,1,2], wspace=0.05)

ax1 = fig.add_subplot(gs1[0])
ax2 = fig.add_subplot(gs2[1])
ax3 = fig.add_subplot(gs2[2], sharey = ax2)
axs = [ax1,ax2,ax3]


# --- PLOT HEATMAP ---

h_ax = axs[0]
C_2darray = (-1)*np.array(pds_2d)
cb_label = r'Power Density [W.m$^{-2}$]'
h_ax.set_xscale('log')

# Normalization for color map
min_a = 1e-7 #np.min(C_2darray)
max_a = 3 #np.max(C_2darray)
norm_log = LogNorm(vmin=min_a, vmax=max_a)
hmap = h_ax.pcolormesh(x_sweep, y_sweep, C_2darray, cmap='magma', shading='gouraud', norm=norm_log)

# Colorbar formatting
cbar = plt.colorbar(hmap)
cbar.ax.tick_params(labelsize=label_fontsize)
cbar.ax.set_ylabel(cb_label, fontsize=label_fontsize)

# Contour lines at fixed power densities
log_lvls = 10. ** np.arange(start=-7, stop=2)

# add contour lines to heatmap
cntr = h_ax.contour(x_sweep, y_sweep, C_2darray, levels=log_lvls, colors='black')

# add labels to contour lines
fmt = ticker.LogFormatterMathtext()
fmt.create_dummy_axis()
h_ax.clabel(cntr, cntr.levels, inline=True, fmt=fmt, fontsize=10, rightside_up=True)

# add ref lines for contour in the colorbar
for lvl in log_lvls:
    cbar.ax.plot([0, 1], 2 * [lvl], '-k')


# adding commercial diodes to the heatmap for ref
if sample_diode_ref:
    for diode in diodes_to_plt:
        h_ax.plot(diode['eta_ext'], diode['Eg'], 'o', markersize=12, c='white')
        h_ax.plot(diode['eta_ext'], diode['Eg'], **diode['style_args'])
        ind_x = x_sweep.searchsorted(diode['eta_ext'])
        ind_y = y_sweep.searchsorted(diode['Eg'])
        cbar.ax.plot([0.5], [C_2darray[ind_y][ind_x]], 'o', markersize=12, c='white')
        cbar.ax.plot([0.5], [C_2darray[ind_y][ind_x]], **diode['style_args'], c='darkviolet')


h_ax.set_xlabel('Radiative Efficiency, $\eta_\mathrm{ext}$', fontsize=label_fontsize)
h_ax.set_ylabel('Bandgap, E$_\mathrm{g}$ [eV]', fontsize=label_fontsize)
h_ax.set_xlim([x_sweep[0], x_sweep[-1]])
h_ax.tick_params(axis='x', labelsize=label_fontsize)
h_ax.tick_params(axis='y', labelsize=label_fontsize)

# ---

# --- SCATTER PLOT ---

diodes = diodes_to_plt
    # [{'id':'A', 'Eg':0.094, 'eta':1, 'styleargs':{}},
    #       {'id':'B','Eg':0.094, 'eta':0.01, 'styleargs':{'fillstyle':'right'}},
    #       {'id':'C','Eg':0.25, 'eta':0.1, 'styleargs':{'mfc':'none', 'mew':1.5}}]
ax_scatter = axs[1]
for diode in diodes:
    for case in comparison_lst:
        opt_xs, opt_pd = get_best_pd(case['TRD in atm'],
                                     args_to_opt=args_to_opt,
                                     args_to_fix={'cutoff_angle':None, 'eta_ext':diode['eta_ext'], 'Eg':diode['Eg'], 'consider_nonrad':True},
                                     alg=alg_powell)

        style_args = diode['style_args']
        style_args.update(case['scatter format'])
        ax_scatter.plot(case['cwv'], opt_pd[0]*(-1), **style_args)

ax_scatter.set_yscale('log')
ax_scatter.set_xlabel('TCWV [mm]', fontsize=label_fontsize)
ax_scatter.set_ylabel('Power Density [W.m$^{-2}$]', fontsize=label_fontsize)
ax_scatter.minorticks_on()
ax_scatter.tick_params(axis='x', labelsize=label_fontsize)
ax_scatter.tick_params(axis='y', labelsize=label_fontsize)


yearly_avg_solar_Wm2 = 32.5
reflines = [{'y':yearly_avg_solar_Wm2, 'string':'yearly avg solar', 'xl':-5, 'xr':10, 'xt':10, 'arrow args':{'arrowstyle':'<-', 'color':'orangered'}, 'text args':{'color':'orangered', 'va':'center', 'ha':'left'}},
            {'y':51, 'string':'300K to 3K limit', 'xl':-5, 'xr':10, 'xt':10, 'arrow args':{'arrowstyle':'<-', 'color':'black'}, 'text args':{'color':'black', 'va':'center', 'ha':'left'}}]
for rl in reflines:
    ax_scatter.annotate(text='', xy=(rl['xr'],rl['y']), xytext=(rl['xl'],rl['y']), arrowprops=rl['arrow args'])
    ax_scatter.plot([0,80],2*[rl['y']], color='white', lw=1)
    ax_scatter.text(s=rl['string'], x=rl['xt'], y=rl['y'], **rl['text args'])



# Plot power magnitude examples
ref_to_power = 9.6 # kWh
sample_area = np.round(ref_to_power / (24 * yearly_avg_solar_Wm2 * 1e-3), decimals=1) # 15.6  # [m2]
power_magnitudes_guides = [{'label':'Average customer in Sydney for 1 day', 'PD':12.2*1e3 / (sample_area*24)},
                           {'label':'800W microwave for 15 mins', 'PD':800*0.25 / (sample_area*24)},
                           {'label':'10W LED bulb for 5h', 'PD':10*5 / (sample_area*24)},
                           {'label':'5W phone charger for 2h', 'PD':10 / (sample_area*24)},
                           {'label':'60W fridge for 24h', 'PD':60*24 / (sample_area*24)},]
ax_powerguide = axs[2]
for pguide in power_magnitudes_guides:
    ax_powerguide.annotate(pguide['label'], xy=(0,pguide['PD']), xytext=(0.1, pguide['PD']), arrowprops=dict(arrowstyle="->"), va='center', fontsize=label_fontsize-2)

ax_powerguide.set_title(f'   Over 24h, {sample_area} m$^2$ can power:', loc='left', fontsize=label_fontsize)
ax_powerguide.axis('off')

# Add legend in second plot
custom_muopt_legend = []
for diode in diodes:
    Eg, eta = diode['Eg'], diode['eta_ext']
    custom_muopt_legend += [Line2D([0],[0], linestyle='none', markeredgecolor= 'dimgrey', markerfacecolor='dimgrey', **diode['style_args'],
                                   label=diode['id'] + ' - E$_\mathrm{g}$=' + f'{Eg} eV' + ', $\eta_\mathrm{ext}=$' + f'{eta*100:.0f}%')]

ax_powerguide.legend(handles=custom_muopt_legend, loc='lower left', title='Sample Diodes', fontsize=label_fontsize-3, title_fontsize=label_fontsize-3)

ax_scatter.grid(axis='y')
ax_scatter.set_xlim([-5,75])
ax_scatter.set_ylim([1e-4, 1e2])


# plt.rcParams.update({'font.size': 40})

# text.Annotation('figure points text', xy=(0.5,0.5), xycoords='figure fraction',fontsize=15, fontweight='bold')
h_ax.set_title('a)', loc='left', fontsize=20, fontweight='bold', pad=0, x=-0.2)
ax_scatter.set_title('b)', loc='left', fontsize=20, fontweight='bold', pad=0, x=-0.6)

plt.show()